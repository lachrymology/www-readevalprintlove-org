Add syntax of 5M -7N and some brief notes about how different types of
arithmetic work: bigint contagion, operators that auto-convert to
bigint if needed, unchecked operators intended only for primitive
arith types.  How to format/printf bigints and ratios.  What else?


Example in abstractions section of extend-protocol


----------------------------------------------------------------------
ns, require, use, import
----------------------------------------------------------------------

Give most common examples of ns use, with :import, :require, and :use

Maybe also give the REPL equivalents of those expressions?

.indexOf and .lastIndexOf for strings, and those are also implemented
for Clojure vectors.  Why not exposed as Clojure functions?
----------------------------------------------------------------------


Add java.io.DataOutputStream / java.io.DataInputStream links for
binary I/O?

java.util.Scanner might be nice to know about.

distinct? doesn't really operate on collections.  It is more like max,
min, and some others in taking an arbitrarily large but variable
number of arguments.  Is there a better place it belongs than
Collections/Content tests?

Decide which if any of the following symbols should be included in the
cheatsheet, and if so, where.

First, a short list of things that seems like they are among the more
significant ones to know about:

bases
class
clojure.repl/dir
clojure.repl/root-cause
definterface
extend
extend-protocol
extenders
extends?
satisfies?
supers
trampoline
type
underive
with-bindings



Now the complete list:

*'
*allow-unresolved-vars*
*assert*
*flush-on-newline*
*fn-loader*
*math-context*
*read-eval*
*source-path*
*unchecked-math*
*use-context-classloader*
*verbose-defrecords*
+'
-'
->ArrayChunk
->Vec
->VecNode
->VecSeq
-cache-protocol-fn
-reset-methods
EMPTY-NODE
accessor
add-classpath
agent-errors
await1
bases
bound?
chunk
chunk-append
chunk-buffer
chunk-cons
chunk-first
chunk-next
chunk-rest
chunked-seq?
class
class?
clear-agent-errors
clojure.data/Diff
clojure.data/EqualityPartition
clojure.data/diff-similar
clojure.data/equality-partition
clojure.java.io/Coercions
clojure.java.io/IOFactory
clojure.java.io/as-file
clojure.java.io/as-relative-path
clojure.java.io/as-url
clojure.java.io/default-streams-impl
clojure.java.io/delete-file
clojure.java.io/make-input-stream
clojure.java.io/make-output-stream
clojure.java.io/make-parents
clojure.java.io/make-reader
clojure.java.io/make-writer
clojure.java.io/resource
clojure.java.javadoc/*core-java-api*
clojure.java.javadoc/*feeling-lucky*
clojure.java.javadoc/*feeling-lucky-url*
clojure.java.javadoc/*local-javadocs*
clojure.java.javadoc/*remote-javadocs*
clojure.java.javadoc/add-local-javadoc
clojure.java.javadoc/add-remote-javadoc
clojure.pprint/*print-base*
clojure.pprint/*print-miser-width*
clojure.pprint/*print-pprint-dispatch*
clojure.pprint/*print-pretty*
clojure.pprint/*print-radix*
clojure.pprint/*print-right-margin*
clojure.pprint/*print-suppress-namespaces*
clojure.pprint/code-dispatch
clojure.pprint/formatter
clojure.pprint/formatter-out
clojure.pprint/fresh-line
clojure.pprint/get-pretty-writer
clojure.pprint/pp
clojure.pprint/pprint-indent
clojure.pprint/pprint-logical-block
clojure.pprint/pprint-newline
clojure.pprint/pprint-tab
clojure.pprint/print-length-loop
clojure.pprint/set-pprint-dispatch
clojure.pprint/simple-dispatch
clojure.pprint/with-pprint-dispatch
clojure.pprint/write
clojure.pprint/write-out
clojure.repl/demunge
clojure.repl/dir
clojure.repl/dir-fn
clojure.repl/root-cause
clojure.repl/set-break-handler!
clojure.repl/source-fn
clojure.repl/stack-element-str
clojure.repl/thread-stopper
clojure.xml/*current*
clojure.xml/*sb*
clojure.xml/*stack*
clojure.xml/*state*
clojure.xml/attrs
clojure.xml/content
clojure.xml/content-handler
clojure.xml/element
clojure.xml/emit
clojure.xml/emit-element
clojure.xml/startparse-sax
clojure.xml/tag
create-struct
dec'
decimal?
definterface
defstruct
delay?
denominator
destructure
extend
extend-protocol
extenders
extends?
find-protocol-impl
find-protocol-method
float?
hash-combine
inc'
integer?
letfn
method-sig
munge
namespace-munge
number?
numerator
primitives-classnames
print-ctor
print-dup
print-method
print-simple
proxy-call-with-super
proxy-name
ratio?
rational?
refer-clojure
replicate
satisfies?
sequence
special-symbol?
struct
struct-map
supers
the-ns
trampoline
type
unchecked-add
unchecked-byte
unchecked-char
unchecked-dec
unchecked-double
unchecked-float
unchecked-inc
unchecked-int
unchecked-long
unchecked-multiply
unchecked-negate
unchecked-short
unchecked-subtract
underive
unquote
unquote-splicing
with-bindings
with-bindings*
with-loading-context
